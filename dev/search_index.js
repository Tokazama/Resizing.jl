var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Resizing","category":"page"},{"location":"#Resizing","page":"Home","title":"Resizing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Resizing.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Resizing]","category":"page"},{"location":"#Resizing.assert_grow_at!-Tuple{Any, Any, Any}","page":"Home","title":"Resizing.assert_grow_at!","text":"assert_grow_at!(collection, i::Int, n::Integer) -> Nothing\n\nExecutes grow_at!(collection, i, n), throwing an error if unsuccessful or nothing if successful.\n\n\n\n\n\n","category":"method"},{"location":"#Resizing.assert_grow_beg!-Tuple{Any, Any}","page":"Home","title":"Resizing.assert_grow_beg!","text":"assert_grow_beg!(collection, n::Integer) -> Nothing\n\nExecutes grow_beg!(collection, n), throwing an error if unsuccessful or nothing if successful.\n\n\n\n\n\n","category":"method"},{"location":"#Resizing.assert_grow_end!-Tuple{Any, Any}","page":"Home","title":"Resizing.assert_grow_end!","text":"assert_grow_end!!(collection, n::Integer) -> Nothing\n\nExecutes grow_end!(collection, n), throwing an error if unsuccessful or nothing if successful.\n\n\n\n\n\n","category":"method"},{"location":"#Resizing.assert_shrink_at!-Tuple{Any, Any, Any}","page":"Home","title":"Resizing.assert_shrink_at!","text":"assert_shrink_at!(collection, i::Int, n::Integer) -> Nothing\n\nExecutes shrink_at!(collection, i, n), throwing an error if unsuccessful or nothing if successful.\n\n\n\n\n\n","category":"method"},{"location":"#Resizing.assert_shrink_beg!-Tuple{Any, Any}","page":"Home","title":"Resizing.assert_shrink_beg!","text":"assert_shrink_beg!(collection, n::Integer) -> Nothing\n\nExecutes shrink_beg!(collection, n), throwing an error if unsuccessful or nothing if successful.\n\n\n\n\n\n","category":"method"},{"location":"#Resizing.assert_shrink_end!-Tuple{Any, Any}","page":"Home","title":"Resizing.assert_shrink_end!","text":"assert_shrink_end!(collection, n::Integer) -> Nothing\n\nExecutes shrink_end!(collection, n), throwing an error if unsuccessful or nothing if successful.\n\n\n\n\n\n","category":"method"},{"location":"#Resizing.grow_at!-Tuple{Any, Any, Integer}","page":"Home","title":"Resizing.grow_at!","text":"grow_at!(collection, i::Int, n::Integer) -> Bool\n\nGrow collection by n elements at index i. This does not ensure that new elements are defined. If successful this will return true return true.\n\nSee also: grow_beg!, grow_end!, unsafe_grow_at!\n\n\n\n\n\n","category":"method"},{"location":"#Resizing.grow_beg!-Tuple{Any, Integer}","page":"Home","title":"Resizing.grow_beg!","text":"grow_beg!(collection, n::Integer) -> Bool\n\nGrow collection by n elements from its first index. This does not ensure that new elements are defined. If successful will return true.\n\nSee also: grow_at!, grow_end!, unsafe_grow_beg!\n\n\n\n\n\n","category":"method"},{"location":"#Resizing.grow_end!-Tuple{Any, Integer}","page":"Home","title":"Resizing.grow_end!","text":"grow_end!(collection, n::Integer) -> Bool\n\nGrow collection by n elements from its last index. This does not ensure that new elements are defined. If successful will return true.\n\nSee also: grow_beg!, grow_at!, unsafe_grow_end!\n\n\n\n\n\n","category":"method"},{"location":"#Resizing.shrink_at!-Tuple{Any, Int64, Integer}","page":"Home","title":"Resizing.shrink_at!","text":"shrink_at!(collection, i::Int, n::Integer) -> Bool\n\nShrink collection by n elements at index i. If successful this will return true.\n\nSee also: shrink_beg!, shrink_end!, unsafe_shrink_at!\n\n\n\n\n\n","category":"method"},{"location":"#Resizing.shrink_beg!-Tuple{Any, Integer}","page":"Home","title":"Resizing.shrink_beg!","text":"shrink_beg!(collection, n::Integer) -> Bool\n\nDeletes n elements from the first index of collection. If successful will return true.\n\nSee also: shrink_at!, shrink_end!, unsafe_shrink_beg!\n\n\n\n\n\n","category":"method"},{"location":"#Resizing.shrink_end!-Tuple{Any, Integer}","page":"Home","title":"Resizing.shrink_end!","text":"shrink_end!(collection, n::Integer) -> Bool\n\nDeletes n elements from begining at the last index of collection. If successful will return true.\n\nSee also: shrink_beg!, shrink_at!, unsafe_shrink_end!\n\n\n\n\n\n","category":"method"},{"location":"#Resizing.unsafe_grow_at!-Tuple{Vector, Int64, Integer}","page":"Home","title":"Resizing.unsafe_grow_at!","text":"unsafe_grow_at!(collection, i::Int, n::Integer) -> Nothing\n\nGrows by n elements at index i of collection.\n\nThis method assumes that collection will grow without any errors and may result in undefined behavior if the user isn't certain collection can safely grow. For example, an instance of Vector cannot be shared with another instance of Array to change sizes.\n\n\n\n\n\n","category":"method"},{"location":"#Resizing.unsafe_grow_beg!-Tuple{Vector, Any}","page":"Home","title":"Resizing.unsafe_grow_beg!","text":"unsafe_grow_beg!(collection, n) -> Nothing\n\nGrows by n elements at the first index of collection.\n\nThis method assumes that collection will grow without any errors and may result in undefined behavior if the user isn't certain collection can safely grow. For example, an instance of Vector cannot be shared with another instance of Array to change sizes.\n\n\n\n\n\n","category":"method"},{"location":"#Resizing.unsafe_grow_end!-Tuple{Vector, Any}","page":"Home","title":"Resizing.unsafe_grow_end!","text":"unsafe_grow_end!(collection, n) -> Nothing\n\nGrows by n elements at the last index of collection. \n\nThis method assumes that collection will grow without any errors and may result in undefined behavior if the user isn't certain collection can safely grow. For example, an instance of Vector cannot be shared with another instance of Array to change sizes.\n\n\n\n\n\n","category":"method"},{"location":"#Resizing.unsafe_shrink_at!-Tuple{Vector, Any, Integer}","page":"Home","title":"Resizing.unsafe_shrink_at!","text":"unsafe_shrink_at!(collection, i, n::Integer) -> Nothing\n\nDeletes n elements from index i of collection.\n\nThis method assumes that collection will shrink without any errors and may result in undefined behavior if the user isn't certain collection can safely shrink. For example, an instance of Vector cannot be shared with another instance of Array to change sizes. It also assumes that the provided number of elements the will be removed does not exceed the size of collection.\n\n\n\n\n\n","category":"method"},{"location":"#Resizing.unsafe_shrink_beg!-Tuple{Vector, Integer}","page":"Home","title":"Resizing.unsafe_shrink_beg!","text":"unsafe_shrink_beg!(collection, n::Integer) -> Nothing\n\nDeletes n elements from the first index of collection.\n\nThis method assumes that collection will shrink without any errors and may result in undefined behavior if the user isn't certain collection can safely shrink. For example, an instance of Vector cannot be shared with another instance of Array to change sizes. It also assumes that the provided number of elements the will be removed does not exceed the size of collection.\n\n\n\n\n\n","category":"method"},{"location":"#Resizing.unsafe_shrink_end!-Tuple{Vector, Integer}","page":"Home","title":"Resizing.unsafe_shrink_end!","text":"unsafe_shrink_end!(collection, n::Integer) -> Nothing\n\nDeletes n elements from the last index of collection.\n\nThis method assumes that collection will shrink without any errors and may result in undefined behavior if the user isn't certain collection can safely shrink. For example, an instance of Vector cannot be shared with another instance of Array to change sizes. It also assumes that the provided number of elements the will be removed does not exceed the size of collection.\n\n\n\n\n\n","category":"method"}]
}
